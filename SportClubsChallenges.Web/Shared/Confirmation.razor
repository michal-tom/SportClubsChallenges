<Modal Open="@windowOpened">
    <ModalTitle>Confirmation</ModalTitle>
    <ModalBody><p>@Body</p></ModalBody>
    <ModalFooter>
        <Button Variant="Outline" OnClick="OnCancelClick">Cancel</Button>
        <Button Variant="Primary" OnClick="OnOkClick">OK</Button>
    </ModalFooter>
</Modal>

@code {
    private bool windowOpened { get; set; }

    private string Body { get; set; }

    private EventCallback<MouseEventArgs> OnCancel { get; set; }

    private EventCallback<MouseEventArgs> OnConfirm { get; set; }

    private delegate Task ConfirmDelegate(MouseEventArgs e);

    public void Show(string body, Func<Task> onConfirmTask)
    {
        ConfirmDelegate confirmDelegate = async (MouseEventArgs e) => await onConfirmTask.Invoke();
        this.OnConfirm = new EventCallback<MouseEventArgs>(null, confirmDelegate);
        this.Body = body;
        this.windowOpened = true;
        StateHasChanged();
    }

    private async Task OnCancelClick(MouseEventArgs e)
    {
        if (this.OnCancel.HasDelegate)
        {
            await this.OnCancel.InvokeAsync(e);
        }

        this.windowOpened = false;
        StateHasChanged();
    }

    private async Task OnOkClick(MouseEventArgs e)
    {
        if (this.OnConfirm.HasDelegate)
        {
            await this.OnConfirm.InvokeAsync(e);
        }

        this.windowOpened = false;
        StateHasChanged();
    }
}