@using System.Security.Claims
@using Microsoft.AspNetCore.Http

@inject IChallengeService challengeService
@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor

@attribute [Authorize]

<br />

@if (challengeParticipations == null)
{
    <p><em>Loading, please wait...</em></p>
}
else
{
    <h3>My challenges</h3>

    @if (challengeParticipations.Count == 0)
    {
        <p>You are not registered to any challenge!</p>
        <br />
        <p>Please go <a class="btn btn-primary" href="/challenges/list">Challenges</a> page to join to any challenge from your Strava club.</p>
    }
    else
    {
        <RadzenGrid Data="@challengeParticipations" TItem="ChallengeParticipationDto"
                    AllowPaging="true" PageSize="10" AllowSorting="true"
                    AllowColumnResize="true">
            <Columns>
                <RadzenGridColumn TItem="ChallengeParticipationDto" Property="ChallengeName" Title="Name" />
                <RadzenGridColumn TItem="ChallengeParticipationDto" Property="ClubName" Title="Club" />
                <RadzenGridColumn TItem="ChallengeParticipationDto" Title="Date Range">
                    <Template Context="participation">
                        @participation.ChallengeStartDate.ToShortDateString() - @participation.ChallengeEndDate.ToShortDateString()
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ChallengeParticipationDto" Property="Rank" Title="Rank">
                    <Template Context="participation">
                        # @participation.Rank
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ChallengeParticipationDto" Title="Score">
                    <Template Context="participation">
                        @participation.Score @participation.ScoreUnit
                    </Template>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>
    }
}

@code {

    List<ChallengeParticipationDto> challengeParticipations;

    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        var athleteId = identityService.GetAthleteIdFromIdentity(user.Identity as ClaimsIdentity);

        challengeParticipations = await challengeService.GetChallengeParticipations(athleteId);
    }
}