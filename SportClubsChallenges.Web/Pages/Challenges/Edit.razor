@page "/challenges/edit/{challengeId}"

@using System.Security.Claims
@using Microsoft.AspNetCore.Http

@inject IChallengeService challengeService
@inject NavigationManager navigationManager
@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor

@attribute [Authorize(Roles = "Admin")]

@*TODO: to css*@
<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<h4>@pageTitle</h4>

@if (challenge == null)
{
    <p><em>Loading, please wait...</em></p>
}
else
{
    <RadzenTemplateForm Data="@challenge" TItem="ChallengeDetailsDto" Submit="@AddOrEditChallenge">
        <div class="row">
            <div class="col-md-6">
                <RadzenFieldset Text="Main Info">
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Club" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="challenge.ClubId" Data="@clubs" style="width: 100%;" TextProperty="Value" ValueProperty="Key" Name="ClubId">
                            </RadzenDropDown>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" Name="Name" @bind-Value="challenge.Name" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Description" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextArea style="width: 100%;" Cols="30" Rows="3" Name="Description" @bind-Value="challenge.Description" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Start date" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker style="width: 100%;" ShowTime="false" Name="StartDate" @bind-Value="challenge.StartDate" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="End date" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker style="width: 100%;" ShowTime="false" Name="EndDate" @bind-Value="challenge.EndDate" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
            <div class="col-md-6">
                <RadzenFieldset Text="Parameters">
                    <div class="row">
                        <div class="col-md-5 align-items-center d-flex">
                            <RadzenLabel Text="Challenge type" />
                        </div>
                        <div class="col-md-7">
                            <RadzenDropDown @bind-Value="challenge.ChallengeType" Data="@challengeTypes" style="width: 100%;" TextProperty="Value" ValueProperty="Key" Name="ChallengeType">
                            </RadzenDropDown>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-5 align-items-center d-flex">
                            <RadzenLabel Text="Activities types" />
                        </div>
                        <div class="col-md-7">
                            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                           @bind-Value=@selectedActivityTypes Multiple="true" Data=@activityTypes
                                           TextProperty="Value" Style="height:250px; width: 100%;" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-5">
                            <RadzenLabel Text="Prevent manual activities" />
                        </div>
                        <div class="col-md-7">
                            <RadzenCheckBox @bind-Value="challenge.PreventManualActivities" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-5">
                            <RadzenLabel Text="Prevent non-GPS activities" />
                        </div>
                        <div class="col-md-7">
                            <RadzenCheckBox @bind-Value="challenge.IncludeOnlyGpsActivities" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
            </div>
        </div>
    </RadzenTemplateForm>
}
@code {

    [Parameter]
    public string ChallengeId { get; set; }

    ChallengeDetailsDto challenge;

    string pageTitle = "Challenge";

    Dictionary<long, string> clubs = new Dictionary<long, string>();
    Dictionary<byte, string> activityTypes = new Dictionary<byte, string>();
    Dictionary<byte, string> challengeTypes = new Dictionary<byte, string>();

    IEnumerable<KeyValuePair<byte, string>> selectedActivityTypes = new List<KeyValuePair<byte, string>>();

    protected override async Task OnInitializedAsync()
    {
        clubs = await challengeService.GetAvailableClubs();
        activityTypes = await challengeService.GetAvailableActivityTypes();
        challengeTypes = challengeService.GetAvailableChallengeTypes();

        if (ChallengeId == null || !long.TryParse(ChallengeId, out long challengeId))
        {
            challenge = new ChallengeDetailsDto();
            pageTitle = "Create new challenge";
        }
        else
        {
            challenge = await challengeService.GetChallenge(challengeId);
            selectedActivityTypes = activityTypes.Where(p => challenge.ActivityTypesIds.Contains(p.Key));
            pageTitle = $"Edit challenge {challenge.Name}";
        }
    }

    protected async Task AddOrEditChallenge()
    {
        var user = httpContextAccessor.HttpContext.User;
        var athleteId = identityService.GetAthleteIdFromIdentity(user.Identity as ClaimsIdentity);

        challenge.OwnerId = athleteId;
        challenge.ActivityTypesIds = selectedActivityTypes.Select(p => p.Key).ToList();

        await challengeService.AddOrEditChallenge(challenge);
        navigationManager.NavigateTo("/challenges/admin");
    }

    void Cancel()
    {
        navigationManager.NavigateTo("/challenges/admin");
    }
}