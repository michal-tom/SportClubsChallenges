@page "/challenges/rank/{challengeId}"

@inject IChallengeService challengeService

@attribute [Authorize]

@if (challengeDetails == null)
{
    <Loading />
}
else
{
    <RadzenFieldset>
        <HeaderTemplate>
            <span>
                <RadzenIcon Icon="list" />
                <span style="font-size:24px;">
                    <b>@challengeDetails.Name</b> leaderboard
                </span>
            </span>
        </HeaderTemplate>
        <ChildContent>
            <RadzenGrid Data="@rankList" TItem="ChallengeRankPositionDto"
                        AllowPaging="true" PageSize="10" AllowSorting="true"
                        AllowColumnResize="true">
                <Columns>
                    <RadzenGridColumn TItem="ChallengeRankPositionDto" Property="Rank" Title="Rank" />
                    <RadzenGridColumn TItem="ChallengeRankPositionDto" Property="AthleteName" Title="Athlete" />
                    <RadzenGridColumn TItem="ChallengeRankPositionDto" Title="Score">
                        <Template Context="position">
                            @position.Score @challengeDetails.ScoreUnit
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </ChildContent>
    </RadzenFieldset>
}

@code {

    [Parameter]
    public string ChallengeId { get; set; }

    ChallengeDetailsDto challengeDetails;

    List<ChallengeRankPositionDto> rankList;

    protected override async Task OnInitializedAsync()
    {
        if (ChallengeId == null || !long.TryParse(ChallengeId, out long challengeId))
        {
            return;
        }

        challengeDetails = await challengeService.GetChallenge(challengeId);
        if (challengeDetails == null)
        {
            return;
        }

        rankList = await challengeService.GetChallengeRank(challengeId);
    }
}
