@inject IChallengeService challengeService
@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager

@attribute [Authorize]

@if (challengeParticipations == null)
{
    <Loading />
}
else if (challengeParticipations.Count == 0)
{
    <div class="text-center">
        <p>You are not registered to any challenge!</p>
        <p>Please go <a href="/challenges/list">Challenges</a> page to join to any challenge from your Strava club.</p>
    </div>
}
else
{
    @foreach (var participation in challengeParticipations)
    {
        <Card Clickable="true" OnClick="() => ShowDetails(participation.ChallengeId)">
            <CardHeader>
                @participation.ChallengeName
                <div class="float-right">
                    <ChallengeStatus Status="@participation.ChallengeStatus.ToString()" />
                </div>
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <div class="clr-row">
                        <div class="clr-col-md-6 clr-col-12">
                            <div>Club:</div>
                            <b>@participation.ClubName</b>
                            <br />
                            @if (!string.IsNullOrEmpty(participation.ClubIconUrl))
                            {
                                <CardMediaBlock ImageSource="@participation.ClubIconUrl" />
                            }
                        </div>
                        <div class="clr-col-md-6 clr-col-12">
                            <div>Current place:</div>
                            <b>
                                @participation.Rank / @participation.ChallengeParticipantsCount
                                (@UnitHelper.GetScoreDescription(participation.Score, participation.ScoreUnit))
                            </b>
                            <div class="card-block-section-margin-top">Competition type:</div>
                            <b><ChallengeCompetitionType Type="@participation.CompetitionType" /></b>
                        </div>
                    </div>
                </CardBlock>
            </CardBody>
            <CardFooter>
                <ProgressGroup>
                    <ProgressBar Value="@TimeHelper.GetPercentageProgress(participation.ChallengeStartDate, participation.ChallengeEndDate)"></ProgressBar>
                    <div class="clr-row font-size-smaller">
                        <div class="clr-col-3">@participation.ChallengeStartDate.ToString("dd/MM/yyyy")</div>
                        <div class="clr-col-6">@TimeHelper.GetChallengeDatePeriodDescription(participation.ChallengeStartDate, participation.ChallengeEndDate)</div>
                        <div class="clr-col-3 text-right">@participation.ChallengeEndDate.ToString("dd/MM/yyyy")</div>
                    </div>
                </ProgressGroup>
            </CardFooter>
        </Card>
    }
}

@code {
    private List<ChallengeParticipationDto> challengeParticipations;

    protected override async Task OnInitializedAsync()
    {
        if (httpContextAccessor.HttpContext.Response.HasStarted)
        {
            var user = httpContextAccessor.HttpContext.User;
            var athleteId = identityService.GetAthleteIdFromIdentity(user.Identity as ClaimsIdentity);

            challengeParticipations = await challengeService.GetActiveChallengeParticipations(athleteId);
        }
    }

    private void ShowDetails(long id)
    {
        navigationManager.NavigateTo($"/challenges/details/{id}");
    }
}