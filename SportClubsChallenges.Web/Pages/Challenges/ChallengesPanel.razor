@using System.Security.Claims
@using Microsoft.AspNetCore.Http

@inject IChallengeService challengeService
@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager

@attribute [Authorize]

@if (challengeParticipations == null)
{
    <Loading />
}
else
{
    <div class="text-center">
        <h4>
            <clr-icon shape="star"></clr-icon>
            My challenges
        </h4>
    </div>
    @if (challengeParticipations.Count == 0)
    {
        <div class="text-center">
            <p>You are not registered to any challenge!</p>
            <p>Please go <a href="/challenges/list">Challenges</a> page to join to any challenge from your Strava club.</p>
        </div>
    }
    else
    {
        <div class="clr-row">
            @foreach (var participation in challengeParticipations)
            {
                <div class="clr-col-lg-6 clr-col-12">
                    <Card Clickable="true" OnClick="() => ShowRank(participation.ChallengeId)">
                        <CardBody>
                            <CardBlock>
                                <div class="clr-row">
                                    <div class="clr-col-md-6 clr-col-12">
                                        <div>Name:</div>
                                        <b>@participation.ChallengeName</b>
                                        <div style="margin-top:10px">Club:</div>
                                        <b>@participation.ClubName</b>
                                        <br />
                                        @if (!string.IsNullOrEmpty(participation.ClubIconUrl))
                                        {
                                            <CardMediaBlock ImageSource="@participation.ClubIconUrl" />
                                        }
                                    </div>
                                    <div class="clr-col-md-6 clr-col-12">
                                        <div>Current Rank:</div>
                                        <b>@participation.Rank / @participation.ChallengeParticipantsCount</b>
                                        <div style="margin-top:10px">Score:</div>
                                        <b>@UnitHelper.GetScoreDescription(participation.Score, participation.ScoreUnit)</b>
                                        <div style="margin-top:10px">Date Range:</div>
                                        <b>@participation.ChallengeStartDate.ToShortDateString() - @participation.ChallengeEndDate.ToShortDateString()</b>
                                    </div>
                                </div>
                            </CardBlock>
                        </CardBody>
                    </Card>
                </div>
            }
        </div>
    }
}

@code {

    List<ChallengeParticipationDto> challengeParticipations;

    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        var athleteId = identityService.GetAthleteIdFromIdentity(user.Identity as ClaimsIdentity);

        challengeParticipations = await challengeService.GetChallengeParticipations(athleteId);
    }

    protected void ShowRank(long id)
    {
        navigationManager.NavigateTo($"/challenges/rank/{id}");
    }
}
