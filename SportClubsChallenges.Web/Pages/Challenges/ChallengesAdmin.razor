@page "/challenges/admin"

@inject IChallengeService challengeService
@inject NavigationManager navigationManager

@attribute [Authorize(Roles = "Admin")]

@if (challenges == null)
{
    <Loading />
}
else
{
    <div>
        <Button Variant="Success" OnClick="() => AddChallenge()">Add new challenge</Button>
    </div>
    <br />

    <Datagrid TRowData="ChallengeOverviewDto" Items="challenges" Placeholder="We couldn't find any challenges!" Fixed="FixedMode.All" style="max-height: 100%">
        <DatagridColumn TRowData="ChallengeOverviewDto" Title="Id" Field="c => c.Id" CanSort="true" CanFilter="true" />
        <DatagridColumn TRowData="ChallengeOverviewDto" Title="Name" Field="c => c.Name" CanSort="true" CanFilter="true" />
        <DatagridColumn TRowData="ChallengeOverviewDto" Title="ClubName" Field="c => c.ClubName" CanSort="true" CanFilter="true" />
        <DatagridColumn TRowData="ChallengeOverviewDto" Title="Date Range">
            @context.StartDate.ToString("dd/MM/yyyy") - @context.EndDate.ToString("dd/MM/yyyy")
        </DatagridColumn>
        <DatagridColumn TRowData="ChallengeOverviewDto" Title="Active" Field="c => c.IsActive" CanSort="true" CanFilter="true" />
        <DatagridColumn TRowData="ChallengeOverviewDto" Title="Type" Field="c => c.CompetitionTypeDescription" CanSort="true" CanFilter="true" />
        <DatagridColumn TRowData="ChallengeOverviewDto" Title="Participants" Field="c => c.ParticipantsCount" CanSort="true" />
        <DatagridColumn TRowData="ChallengeOverviewDto" Title="Actions">
            <ButtonGroup Variant="Primary">
                <Button OnClick="() => EditChallenge(context.Id)">Edit</Button>
                <Button Variant="Danger" OnClick="() => ConfirmDeleteChallenge(context.Id, context.Name)">Delete</Button>
            </ButtonGroup>
        </DatagridColumn>
        <DatagridFooter TRowData="ChallengeOverviewDto">
            <DatagridFooterDescription TRowData="ChallengeOverviewDto">@challenges.Count challenge(s)</DatagridFooterDescription>
        </DatagridFooter>
    </Datagrid>
}

@code {

    List<ChallengeOverviewDto> challenges;

    [CascadingParameter]
    public MainLayout Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadChallenges();
    }

    protected void ConfirmDeleteChallenge(long id, string challengeName)
    {
        this.Layout.popupWrapper.ShowConfirmation(
            $"Do you really want to remove challenge '{challengeName}'?",
            () => DeleteChallenge(id, challengeName));
    }

    protected async Task DeleteChallenge(long id, string challengeName)
    {
        await challengeService.DeleteChallenge(id);

        this.Layout.alertWrapper.ShowAlert($"Challenge '{challengeName}' was successfully removed!");

        await LoadChallenges();
        this.StateHasChanged();
    }

    protected void AddChallenge()
    {
        navigationManager.NavigateTo($"/challenges/add");
    }

    protected void EditChallenge(long id)
    {
        navigationManager.NavigateTo($"/challenges/edit/{id}");
    }

    private async Task LoadChallenges()
    {
        challenges = await challengeService.GetAllChallenges();
    }
}