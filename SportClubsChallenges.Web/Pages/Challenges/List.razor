@page "/challenges/list"

@using System.Security.Claims
@using Microsoft.AspNetCore.Http

@inject IChallengeService challengeService
@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager
@inject NotificationService notificationService
@inject TooltipService tooltipService

@attribute [Authorize]

<br />

@if (challengesModel == null)
{
    <p><em>Loading, please wait...</em></p>
}
else
{
    <RadzenGrid Data="@challengesModel" TItem="ChallengeOverviewDto"
                AllowPaging="true" PageSize="10" AllowSorting="true"
                AllowColumnResize="true">
        <Columns>
            <RadzenGridColumn TItem="ChallengeOverviewDto" Property="Name" Title="Name">
                <Template Context="challenge">
                    <RadzenContentContainer MouseEnter="@(args => ShowDescription(args, challenge.Description))">
                        @challenge.Name
                    </RadzenContentContainer> 
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="ChallengeOverviewDto" Property="ClubName" Title="Club" />
            <RadzenGridColumn TItem="ChallengeOverviewDto" Title="Date Range">
                <Template Context="challenge">
                    @challenge.StartDate.ToShortDateString() - @challenge.EndDate.ToShortDateString()
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="ChallengeOverviewDto" Property="ParticipantsCount" Title="Participants" />
            <RadzenGridColumn TItem="ChallengeOverviewDto" Title="Actions">
                <Template Context="challenge">
                    <RadzenButton Text="Rank" Icon="list" Click=@(() => ShowRank(challenge.Id)) ButtonStyle="ButtonStyle.Secondary" Style="padding: 0px 10px;"></RadzenButton>
                    @if (challenge.IsAthleteRegistred)
                    {
                        <RadzenButton Text="Leave" Icon="logout" Click=@(() => LeaveChallenge(challenge.Id, challenge.Name)) ButtonStyle="ButtonStyle.Primary" Style="padding: 0px 10px;"></RadzenButton>
                    }
                    else
                    {
                        <RadzenButton Text="Join" Icon="login" Click=@(() => JoinChallenge(challenge.Id, challenge.Name)) ButtonStyle="ButtonStyle.Success" Style="padding: 0px 10px;"></RadzenButton>
                    }
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}

@code {

    List<ChallengeOverviewDto> challengesModel;

    long athleteId;

    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        this.athleteId = identityService.GetAthleteIdFromIdentity(user.Identity as ClaimsIdentity);

        await LoadChallenges();
    }

    private async Task LoadChallenges()
    {
        challengesModel = await challengeService.GetAvailableChallenges(this.athleteId);
    }

    protected void ShowRank(long challengeId)
    {
        navigationManager.NavigateTo($"/challenges/rank/{challengeId}");
    }

    protected async Task LeaveChallenge(long challengeId, string challengeName)
    {
        await challengeService.LeaveChallenge(this.athleteId, challengeId);

        var message = new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = $"You leave '{challengeName}' challenge!"
        };
        notificationService.Notify(message);

        await LoadChallenges();
    }

    protected async Task JoinChallenge(long challengeId, string challengeName)
    {
        await challengeService.JoinChallenge(this.athleteId, challengeId);

        var message = new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = $"You successfully join to '{challengeName}' challenge!"
        };
        notificationService.Notify(message);

        await LoadChallenges();
    }

    protected void ShowDescription(ElementReference elementReference, string description)
    {
        if (string.IsNullOrEmpty(description))
        {
            return;
        }

        tooltipService.Open(elementReference, description, new TooltipOptions() { Position = TooltipPosition.Bottom });
    }
}