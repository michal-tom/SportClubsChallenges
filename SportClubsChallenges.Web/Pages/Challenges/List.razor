@page "/challenges/list"

@using System.Security.Claims
@using Microsoft.AspNetCore.Http

@inject IChallengeService challengeService
@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor

@attribute [Authorize]

<br />

@if (challengesModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Date Range</th>
                <th>Club</th>
                <th>Participants Count</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (challengesModel == null || challengesModel.Count == 0)
            {
                <tr>
                    <td colspan="6">
                        No active challenges
                    </td>
                </tr>
            }
            else
            {
                foreach (var challenge in challengesModel)
                {
                    <tr>
                        <td>@challenge.Name</td>
                        <td>@challenge.Description</td>
                        <td>@challenge.StartDate.ToShortDateString() - @challenge.EndDate.ToShortDateString()</td>
                        <td>@challenge.ClubName</td>
                        <td>@challenge.ParticipantsCount</td>
                        <td>
                            <a class="btn btn-success" href="/challenges/rank/@challenge.Id">Rank</a>
                            @if (challenge.IsAthleteRegistred)
                            {
                                <a class="btn btn-warning" @onclick="() => LeaveChallenge(challenge.Id)">Leave</a>
                            }
                            else
                            {
                                <a class="btn btn-success" @onclick="() => JoinChallenge(challenge.Id)">Join</a>
                            }
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>
}

@code {

    List<ChallengeOverviewDto> challengesModel;

    long athleteId;

    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        this.athleteId = identityService.GetAthleteIdFromIdentity(user.Identity as ClaimsIdentity);

        await LoadChallenges();
    }

    private async Task LoadChallenges()
    {
        challengesModel = await challengeService.GetAvailableChallenges(this.athleteId);
    }

    protected async Task LeaveChallenge(long challengeId)
    {
        await challengeService.LeaveChallenge(this.athleteId, challengeId);
        await LoadChallenges();
    }

    protected async Task JoinChallenge(long challengeId)
    {
        await challengeService.JoinChallenge(this.athleteId, challengeId);
        await LoadChallenges();
    }
}