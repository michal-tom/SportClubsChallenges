@page "/clubs"

@inject IClubService clubService

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

<div>
    <a class="btn btn-primary" href='/addArticle'>Add</a>
</div>
<br />

@if (clubsModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<div class="row col-md-3 pull-right">
        <input type="text" id="txtSearch" placeholder="Search Titles..." class="form-control" @bind="SearchTerm" @bind:event="oninput" />
    </div>*@
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th">
                    Id
                </th>
                <th class="sort-th">
                    Name
                </th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (clubsModel == null || clubsModel.Count == 0)
            {
                <tr>
                    <td colspan="3">
                        No Records to display
                    </td>
                </tr>
            }
            else
            {
                foreach (var club in clubsModel)
                {
                    <tr>
                        <td>@club.Id</td>
                        <td>@club.Name</td>
                        <td>
                            <a class="btn btn-primary" href='/editArticle/@club.Id'>Edit</a>  |
                            <a class="btn btn-danger" @onclick="() => DeleteClub(club.Id)">Delete</a>
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>
    @*<div class="pagination">
        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("previous"))>Prev</button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@(async () =>await refreshRecords(currentPage))>
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("next"))>Next</button>

    </div>*@
}


@code {
    //private string searchTerm;
    //private string SearchTerm
    //{
    //    get { return searchTerm; }
    //    set { searchTerm = value; FilterRecords(); }
    //}

    List<ClubDto> clubsModel;
    ClubDto clubDto = new ClubDto();


    #region Pagination

    #endregion

    protected override async Task OnInitializedAsync()
    {
        clubsModel = await clubService.GetAllClubs();
    }


    protected async Task DeleteClub(long id)
    {
        //clubService.DeleteClub(id);
        clubsModel = await clubService.GetAllClubs();
    }

    //private bool isSortedAscending;
    //private string activeSortColumn;

    //private async Task<List<Article>> SortRecords(string columnName, string dir)
    //{
    //    return await clubService.ListAll((curPage - 1) * pageSize, pageSize, columnName, dir, searchTerm);
    //}

    //private async Task SortTable(string columnName)
    //{
    //    if (columnName != activeSortColumn)
    //    {
    //        articleModel = await SortRecords(columnName, "ASC");
    //        isSortedAscending = true;
    //        activeSortColumn = columnName;
    //    }
    //    else
    //    {
    //        if (isSortedAscending)
    //        {
    //            articleModel = await SortRecords(columnName, "DESC");
    //        }
    //        else
    //        {
    //            articleModel = await SortRecords(columnName, "ASC");
    //        }

    //        isSortedAscending = !isSortedAscending;
    //    }
    //    sortColumnName = columnName;
    //    sortDir = isSortedAscending ? "ASC" : "DESC";
    //}

    //private string SetSortIcon(string columnName)
    //{
    //    if (activeSortColumn != columnName)
    //    {
    //        return string.Empty;
    //    }
    //    if (isSortedAscending)
    //    {
    //        return "fa-sort-up";
    //    }
    //    else
    //    {
    //        return "fa-sort-down";
    //    }
    //}

    public async Task refreshRecords(int currentPage)
    {
        clubsModel = await clubService.GetAllClubs();
        this.StateHasChanged();
    }

    //public void SetPagerSize(string direction)
    //{
    //    if (direction == "forward" && endPage < totalPages)
    //    {
    //        startPage = endPage + 1;
    //        if (endPage + pagerSize < totalPages)
    //        {
    //            endPage = startPage + pagerSize - 1;
    //        }
    //        else
    //        {
    //            endPage = totalPages;
    //        }
    //        this.StateHasChanged();
    //    }
    //    else if (direction == "back" && startPage > 1)
    //    {
    //        endPage = startPage - 1;
    //        startPage = startPage - pagerSize;
    //    }
    //    else
    //    {
    //        startPage = 1;
    //        endPage = totalPages;
    //    }
    //}

    //public async Task NavigateToPage(string direction)
    //{
    //    if (direction == "next")
    //    {
    //        if (curPage < totalPages)
    //        {
    //            if (curPage == endPage)
    //            {
    //                SetPagerSize("forward");
    //            }
    //            curPage += 1;
    //        }
    //    }
    //    else if (direction == "previous")
    //    {
    //        if (curPage > 1)
    //        {
    //            if (curPage == startPage)
    //            {
    //                SetPagerSize("back");
    //            }
    //            curPage -= 1;
    //        }
    //    }
    //    await refreshRecords(curPage);
    //}

    //public void FilterRecords()
    //{
    //    endPage = 0;
    //    this.OnInitializedAsync().Wait();
    //}

}
