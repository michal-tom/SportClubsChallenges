@using System.Security.Claims
@using Microsoft.AspNetCore.Http

@inject IActivityService activityService
@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor

@attribute [Authorize]

@if (activities == null)
{
    <Loading />
}
else if (activities.Count == 0)
{
    <div class="text-center">
        <p>None of your activities have been imported yet.</p>
    </div>
}
else
{
    <Timeline Vertical=true>
        @foreach (var activity in activities)
        {
            <TimelineStep State="StepState.NotStarted">
                <StepHeader>
                    <span>@activity.StartDate.ToString("dd/MM/yyyy")</span>
                    <br />
                    <span class="clr-timeline-step-header-description">@activity.StartDate.ToString("HH:mm")</span>
                </StepHeader>
                <StepTitle>
                    @activity.Name
                </StepTitle>
                <StepDescription>
                    <Label>@activity.ActivityType</Label>
                    <clr-icon shape="route" class="small-icon"></clr-icon> @UnitHelper.GetDistanceDescription(activity.Distance)
                    <clr-icon shape="timer" class="small-icon"></clr-icon> @UnitHelper.GetTimeDescription(activity.Duration)
                </StepDescription>
            </TimelineStep>
        }
    </Timeline>

    <ActivitiesWeekStats />
}

@code {
    [Parameter]
    public int Count { get; set; }

    private List<ActivityDto> activities;

    protected override async Task OnInitializedAsync()
    {
        if (httpContextAccessor.HttpContext.Response.HasStarted)
        {
            var user = httpContextAccessor.HttpContext.User;
            var athleteId = identityService.GetAthleteIdFromIdentity(user.Identity as ClaimsIdentity);

            activities = await activityService.GetAthleteActivities(athleteId, this.Count);
        }
    }
}