@page "/"

@using System.Security.Claims
@using Microsoft.AspNetCore.Http

@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager
@inject ILocalStorageService localStoreService

@attribute [Authorize]

<div class="clr-row">
    <div class="clr-col-md-4 clr-col-12">
        <Card>
            <CardHeader>
                <Icon Shape="challenge"></Icon>
                <span>Challenges</span>
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <ChallengesPanel />
                </CardBlock>
            </CardBody>
        </Card>
    </div>
    <div class="clr-col-md-4 clr-col-12">
        <Card>
            <CardHeader>
                <Icon Shape="activity"></Icon>
                <span>Last activities</span>
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <ActivitiesTimeline Count="5" />
                </CardBlock>
            </CardBody>
            <CardFooter>
                <Button Flat="true" Small="true" OnClick="() => ShowActivities()">Show all activities</Button>
            </CardFooter>
        </Card>
    </div>
    <div class="clr-col-md-4 clr-col-12">
        <Card>
            <CardHeader>
                <Icon Shape="bar-chart"></Icon>
                <span>Clubs</span>
            </CardHeader>
            <CardBody>
                <CardBlock>
                    <ClubsPanel />
                </CardBlock>
            </CardBody>
        </Card>
    </div>
</div>

@code {
    private readonly string showedInitialAlertLocalStorageKey = "showedInitialAlert";

    [CascadingParameter]
    public AppLayout Layout { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = httpContextAccessor.HttpContext.User;
        var showInitialAlert = identityService.ShouldShowInitialAlert(user.Identity as ClaimsIdentity);

        if (!showInitialAlert)
        {
            return;
        }

        var alreadyShowedInitialAlert = await localStoreService.GetItemAsync<string>(showedInitialAlertLocalStorageKey);
        if (string.IsNullOrEmpty(alreadyShowedInitialAlert) || alreadyShowedInitialAlert != "true")
        {
            this.Layout.alertWrapper.ShowInitialAlert();
            await localStoreService.SetItemAsync(showedInitialAlertLocalStorageKey, "true");
        }
    }

    private void ShowActivities()
    {
        navigationManager.NavigateTo("/activities/list");
    }
}