@using System.Linq

@inject IClubService clubService
@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager

@attribute [Authorize]

@if (athleteClubsToShow == null)
{
    <Loading />
}
else if (athleteClubsToShow.Count == 0)
{
    <div class="text-center">
        <p>You are not a member of any Strava club or your data has not been imported from Strava yet.</p>
    </div>
}
else
{
    @foreach (var club in athleteClubsToShow)
    {
        <Card Clickable="true" OnClick="() => ShowDetails(club.Id)">
            <CardBody>
                <CardBlock>
                    <CardText>
                        @club.Name
                        @if (club.ActiveChallengesCount > 0)
                        {
                            <div class="float-right">
                                <Label Status="Status.Success">@club.ActiveChallengesCount &nbsp; <Icon Shape="challenge"></Icon></Label>
                            </div>
                        }
                    </CardText>
                    <CardMediaBlock ImageSource="@club.IconUrl" />
                </CardBlock>
            </CardBody>
        </Card>
    }

    @if (allAthleteClubs.Count > MaxClubsToShow)
    {
        <div class="text-center">
            <Button Flat="true" OnClick="ShowAllClubs">+@(athleteClubsToShow.Count - MaxClubsToShow) more</Button>
        </div>
    }
}

@code {

    private List<ClubDto> allAthleteClubs;

    private List<ClubDto> athleteClubsToShow;

    private readonly int MaxClubsToShow = 5;

    protected override async Task OnInitializedAsync()
    {
        if (httpContextAccessor.HttpContext.Response.HasStarted)
        {
            var user = httpContextAccessor.HttpContext.User;
            var athleteId = identityService.GetAthleteIdFromIdentity(user.Identity as ClaimsIdentity);

            allAthleteClubs = await clubService.GetAthleteClubs(athleteId);
            athleteClubsToShow = allAthleteClubs.OrderByDescending(p => p.ActiveChallengesCount).ThenByDescending(p => p.InactiveChallengesCount).ThenBy(p => p.Id).Take(MaxClubsToShow).ToList();
        } 
    }

    private void ShowDetails(long id)
    {
        navigationManager.NavigateTo($"/clubs/details/{id}");
    }

    private void ShowAllClubs()
    {
        navigationManager.NavigateTo($"/profile");
    }
}