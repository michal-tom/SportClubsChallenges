@using Microsoft.AspNetCore.SignalR.Client

@inject INotificationService notificationService
@inject IIdentityService identityService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager

<a href="javascript:void(0)" role="tooltip" aria-haspopup="true" class="tooltip tooltip-md tooltip-bottom-left">
    <Icon Shape="envelope" Badge=@NotificationBadgeIcon @onclick="() => OpenNotificationModalWindow()" />
    <span class="tooltip-content">
        @if (this.unreadNotificationsCount > 1)
        {
            <span>There are @this.unreadNotificationsCount new notifications.</span>
        }
        else if (this.unreadNotificationsCount == 1)
        {
            <span>There is one new notification.</span>
        }
        else
        {
            <span>There is no new notifications.</span>
        }
    </span>
</a>

@code {
    [CascadingParameter]
    public AppLayout Layout { get; set; }

    private HubConnection hubConnection;

    private IconBadge? NotificationBadgeIcon { get; set; }

    private long athleteId { get; set; }

    private long unreadNotificationsCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (httpContextAccessor.HttpContext.Response.HasStarted)
        {
            var user = httpContextAccessor.HttpContext.User;
            this.athleteId = identityService.GetAthleteIdFromIdentity(user.Identity as ClaimsIdentity);
            await this.SetNotificationBadge();
            await this.ConfigureHubConnection();
        } 
    }

    public  async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void OpenNotificationModalWindow()
    {
        this.Layout.notificationsPopup.OpenNotificationModalWindow(SetNotificationBadge);
    }

    private async Task SetNotificationBadge()
    {
        this.unreadNotificationsCount = await notificationService.GetAthleteUnreadNotificationsCount(this.athleteId);
        if (this.unreadNotificationsCount > 0)
        {
            this.NotificationBadgeIcon = IconBadge.Danger;
        }
        else
        {
            this.NotificationBadgeIcon = null;
        }

        StateHasChanged();
    }

    private async Task ConfigureHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri($"/notifications?athleteId={athleteId}"))
            .Build();

        hubConnection.On<string>("Notify", async (message) =>
        {
            await this.SetNotificationBadge();
        });

        await hubConnection.StartAsync();
    }
}